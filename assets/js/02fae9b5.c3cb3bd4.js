"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const l={},r=void 0,o={type:"mdx",permalink:"/ClientCast/",source:"@site/pages/index.md",description:"Table of Contents",frontMatter:{}},s=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Making a part kill players",id:"making-a-part-kill-players",level:3},{value:"Note: This will not work until the part starts moving around.",id:"note-this-will-not-work-until-the-part-starts-moving-around",level:3},{value:"Setup",id:"setup",level:2},{value:"Links",id:"links",level:2}],p={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pyseph.github.io/ClientCast#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pyseph.github.io/ClientCast#example-usage"},"Example Usage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pyseph.github.io/ClientCast#setup"},"Setup")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pyseph.github.io/ClientCast#links"},"Links"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"ClientCast is a simple and elegant solution to handling weapon hitboxes. This module is written with efficiency, simplicity and customizability in mind. This module is meant to be bareboned. ClientCast relies solely on raycasts to provide with hitbox data, and as such is not only extremely efficient, but also provides detailed information on where and when it hit an object. If you would like to get extra data or add your own functions, the best solution would be to simply wrap the object and add your own methods onto it."),(0,i.kt)("p",null,"The main forte of ClientCast lies in the fact that you can easily communicate with the client, letting the client handle all the calculations and then have the server be notified whenever the client intersects something. This allows the server to have to calculate way less and also take into account for a player's ping or delay, providing all players a lag-free experience."),(0,i.kt)("h2",{id:"example-usage"},"Example Usage"),(0,i.kt)("h3",{id:"making-a-part-kill-players"},"Making a part kill players"),(0,i.kt)("p",null,"Simply parent the ClientCast folder to ServerStorage and run this script on the server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local ClientCast = require(game.ServerStorage.ClientCast)\n\nlocal KillPart = Instance.new('Part')\nKillPart.Anchored = true\nKillPart.CanCollide = false\nKillPart.CFrame = CFrame.new(0, 1, 0)\nKillPart.Parent = workspace\n\nfunction GenerateAttachment(Position)\n    local Attachment = Instance.new('Attachment')\n    Attachment.Name = 'DmgPoint'\n    Attachment.Position = Position\n    Attachment.Parent = KillPart\nend\n\nfor X = -2, 2 do\n    GenerateAttachment(Vector3.new(X, Y, Z))\nend\n\nlocal ClientCaster = ClientCast.new(KillPart, RaycastParams.new())\nlocal Debounce = {}\nClientCaster.HumanoidCollided:Connect(function(RaycastResult, HitHumanoid)\n    if Debounce[HitHumanoid] then\n        return\n    end\n    Debounce[HitHumanoid] = true\n    print('Ow!')\n    HitHumanoid:TakeDamage(10)\n    \n    wait(0.5)\n    Debounce[HitHumanoid] = false\nend)\nClientCaster:Start()\n")),(0,i.kt)("h3",{id:"note-this-will-not-work-until-the-part-starts-moving-around"},"Note: This will not work until the part starts moving around."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cdn.discordapp.com/attachments/623866531138371612/781247798589915166/bqa6Y6hmbN.mp4"},(0,i.kt)("img",{parentName:"a",src:"https://cdn.discordapp.com/attachments/623866531138371612/781248496979804220/unknown.png",alt:"asciicast"}))),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"To start using this module, simply put attachments called ",(0,i.kt)("inlineCode",{parentName:"p"},"DmgPoint")," (name is customizable in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Settings")," table at the top of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientCast")," ModuleScript) inside the object, and then create a ClientCaster object, with it's ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," set to your hitbox.\nExample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- Call module\nlocal ClientCast = require(PATH.ClientCast)\n-- Create ClientCaster object\nlocal Caster = ClientCast.new(workspace.Part, RaycastParams.new())\n\n-- Connect callback to 'Collided' event\nCaster.Collided:Connect(print)\n-- Set owner of ClientCaster, who will be the one to calculate collisions.\n-- You can skip this if you want the server to be the owner.\nCaster:SetOwner(Player)\n-- Start detecting collisions\nCaster:Start()\n")),(0,i.kt)("h2",{id:"links"},"Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pyseph.github.io/ClientCast#example-usage"},"Example Usage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pyseph.github.io/ClientCast#setup"},"Setup")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pyseph.github.io/ClientCast/api/ClientCast"},"ClientCast API"))))}u.isMDXComponent=!0}}]);